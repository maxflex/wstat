{"version":3,"sources":["app.coffee","login.coffee","components/plural.coffee","mixins/export.coffee","mixins/transform.coffee"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["$(document).ready ->\n  app = new Vue\n    el: '#app'\n    mixins: [TransformMixin, ExportMixin]\n    data:\n      addwords_error: false\n      list:\n        title: null\n        phrases: [{phrase: 'phrase one test'}, {phrase: 'phrase two test'}]\n        # phrases: []\n      modal: {}\n      find_phrase: null\n      replace_phrase: null\n      center_title: null\n      frequencies: []\n    created: ->\n      #                 #\n      # PRIVATE METHODS #\n      #                 #\n      @_getFrequencies = (step = 0) =>\n        phrases = @list.phrases.slice(step * 100, (step * 100) + 100)\n        # для подсчета кол-ва процентов\n        length = @list.phrases.length / 10 * 10 + 100\n        @center_title = Math.round(step / length * 10000) + '%'\n        this.$http.post 'api/getFrequencies',\n          phrases: _.pluck(phrases, 'phrase')\n        .then (response) =>\n          @frequencies = @frequencies.concat(response.data)\n          if phrases.length is 100\n            @_getFrequencies(step + 1)\n          else\n            # завершено\n            @list.phrases.forEach (phrase, index) =>\n              phrase.frequency = @frequencies[index]\n            @center_title = null\n        , (response) ->\n          notifyError(response.data)\n          @center_title = null\n    #                #\n    # PUBLIC METHODS #\n    #                #\n    methods:\n      runModal: (action, title, placeholder = 'список слов или фраз...', value = null) ->\n        @modal = value: value, action: action, title: title, placeholder: placeholder\n        showModal('main')\n\n      addWords: ->\n        new_phrases = []\n        @addwords_error = false\n        @modal.value.split('\\n').forEach (line, index) =>\n          return if @addwords_error # one error at a time\n          # skip empty lines\n          if line.trim().length\n            # parse tabs\n            parsed_line = line.split('\\t')\n            # error if more than N elements\n            return @addWordsError(index, line, 'некорректрое форматирование') if parsed_line.length > 3\n            [phrase, frequency, original] = parsed_line\n            ### PHRASE ###\n            # error if no original value\n            return @addWordsError(index, line, 'отсутствует основная фраза') if not phrase\n            [phrase, minus] = @separateMinuses(phrase)\n            list_item = {phrase: phrase, minus: minus, original: phrase}\n            ### FREQUENCY ###\n            if frequency\n              return @addWordsError(index, line, 'частота должна быть числом') if not $.isNumeric(frequency)\n              list_item.frequency = parseInt(frequency)\n            ### ORIGINAL ###\n            list_item.original = original if original\n            new_phrases.push(list_item)\n        return if @addwords_error\n        @list.phrases = @list.phrases.concat(new_phrases)\n        closeModal()\n\n      addWordsError: (index, line, message) ->\n        @addwords_error = true\n        notifyError(\"#{message}<br>строка #{index + 1}: <i>#{line}</i>\")\n        return false\n\n      # удалить дубликаты\n      uniq: (phrases = null) ->\n        new_phrases = _.uniq((phrases or @list.phrases), 'phrase')\n        if phrases\n          return new_phrases\n        else\n          @list.phrases = new_phrases\n\n      addMinuses: ->\n        minuses = []\n        @modal.value.split('\\n').forEach (line) ->\n          # skip empty lines\n          if line.trim().length\n            words = line.trim().split(' ')\n            minuses = minuses.concat(words)\n        minuses.forEach (word) =>\n          word = \"-#{word}\" if word[0] isnt '-'\n          @list.phrases.forEach (phrase) ->\n            minus_words = if not phrase.minus then [] else phrase.minus.toWords()\n            minus_words.push(word)\n            phrase.minus = minus_words.toPhrase()\n        closeModal()\n\n      # разбить фразы на слова\n      splitPhrasesToWords: (phrases = null) ->\n        new_phrases = []\n        (phrases or @list.phrases).forEach (list_item) ->\n          list_item.phrase.split(' ').forEach (word) ->\n            word = word.trim()\n            if word.length\n              item = _.extend _.clone(list_item), {phrase: word}\n              delete item.id\n              new_phrases.push item\n        if phrases\n          return new_phrases\n        else\n          @list.phrases = new_phrases\n\n      replace: ->\n        @list.phrases.forEach (phrase) => phrase.phrase = replaceWord(phrase.phrase, @find_phrase, @replace_phrase)\n        @find_phrase = null\n        @replace_phrase = null\n        closeModal('replace')\n\n      lowercase: ->\n        @list.phrases.forEach (phrase) -> phrase.phrase = phrase.phrase.toLowerCase()\n\n      # проставить частоты\n      getFrequencies: ->\n        @frequencies = []\n        @_getFrequencies()\n\n      # конфигурация минус-слов\n      configureMinus: ->\n        @removeMinuses()\n        @list.phrases.forEach (phrase) =>\n          words_list = phrase.phrase.toWords()\n          @list.phrases.forEach (phrase2) =>\n            # самого себя не проверяем\n            if phrase.phrase isnt phrase2.phrase\n              words_list2 = phrase2.phrase.toWords()\n              flag = true\n              words_list.forEach (word) ->\n                if word in words_list2\n                  words_list2[words_list2.indexOf(word)] = null\n                else\n                  flag = false\n              if flag and words_list2.length is (words_list.length + 1)\n                phrase.minuses = [] if not phrase.hasOwnProperty('minuses')\n                words_list2.forEach (word) ->\n                  phrase.minuses.push(\"-#{word}\") if word\n        @list.phrases.forEach (phrase) ->\n          if phrase.hasOwnProperty('minuses') and phrase.minuses.length\n            minus_list = if not phrase.minus then [] else phrase.minus.toWords()\n            minus_list = minus_list.concat(phrase.minuses)\n            phrase.minus = minus_list.toPhrase()\n            phrase.minuses = []\n\n\n\n\n      removeMinuses: ->\n        @list.phrases.forEach (phrase) -> phrase.minus = ''\n\n      separateMinuses: (phrase, minus = []) ->\n        minus = minus.split(' ') if not $.isArray(minus)\n        words = []\n        phrase.split(' ').forEach (value) ->\n          if value[0] is '-' and value.trim().length\n            minus.push(value)\n          else\n            words.push(value)\n        [words.join(' '), minus.join(' ')]\n","angular\n    .module 'Wstat', ['angular-ladda']\n    .controller 'LoginCtrl', ($scope, $http) ->\n        angular.element(document).ready ->\n            $scope.l = Ladda.create(document.querySelector('#login-submit'))\n\n        $scope.checkFields = ->\n            $scope.l.start()\n            ajaxStart()\n            $scope.in_process = true\n            $http.post 'login',\n                login: $scope.login\n                password: $scope.password\n            .then (response) ->\n                if response.data is true\n                    location.reload()\n                else\n                    $scope.in_process = false\n                    ajaxEnd()\n                    $scope.l.stop()\n                    notifyError \"Неправильная пара логин-пароль\"\n","plurals =\n  'minute': ['минуту', 'минуты', 'минут']\n  'hour': ['час', 'часа', 'часов']\n  'day': ['день', 'дня', 'дней']\n  'phrase': ['фраза', 'фразы', 'фраз']\n  'minus': ['минус слово', 'минус слова', 'минус слов']\n\nVue.component 'plural',\n  props: ['count', 'type']\n  computed:\n    text: ->\n      if @count % 10 is 1 and @count % 100 isnt 11\n        plurals[@type][0]\n      else if @count % 10 >= 2 and @count % 10 <=4 && @count % 100 < 10 or @count % 100 >= 20\n        plurals[@type][1]\n      else plurals[@type][2]\n  template: \"\"\"\n    <span>{{ count }} {{ text }}</span>\n  \"\"\"\n","@ExportMixin =\n  created: ->\n    @columnDelimiter = ';'\n    @lineDelimiter = '\\n'\n    @filename = 'wstat.xls'\n    @fields = ['phrase', 'minus', 'original', 'frequency']\n\n    @convertListToCSV = =>\n      data = ['id' + @columnDelimiter + @fields.join(@columnDelimiter)] # headers\n      @list.phrases.forEach (phrase, index) =>\n        item = [index + 1]\n        @fields.forEach (field) -> item.push(phrase[field])\n        data.push(item.join(@columnDelimiter))\n      data.join(@lineDelimiter)\n\n  methods:\n    downloadCSV: ->\n      csv = @convertListToCSV()\n      csv = 'data:text/xls;charset=utf-8,' + csv\n      data = encodeURI(csv)\n      link = document.createElement('a')\n      link.setAttribute('href', data)\n      link.setAttribute('download', @filename)\n      link.click()\n","@TransformMixin =\n  data:\n    selected_rows: []\n    transform_items: {}\n    transform_phrases: {}\n  methods:\n    transformModal: ->\n      @transform_phrases = _.clone(@list.phrases)\n      @transform_phrases = @splitPhrasesToWords(@transform_phrases)\n      @transform_phrases = @uniq(@transform_phrases)\n      @transform_phrases = _.sortBy(@transform_phrases, 'phrase')\n      showModal('transform')\n\n    selectRow: (index) ->\n      if @selected_rows.indexOf(index) is -1\n        @selected_rows.push(index)\n      else\n        @selected_rows.splice(@selected_rows.indexOf(index), 1)\n\n    transformAdd: (index) ->\n      # скрываем добавленные и добавляем к добавленному\n      @transform_phrases[index].words = [] if @transform_phrases[index].words is undefined\n      @selected_rows.forEach (position) =>\n        @transform_phrases[position].added = true\n        @transform_phrases[index].words.push(@transform_phrases[position].phrase)\n      # добавляем к массиву индексов\n      @transform_items[index] = [] if @transform_items[index] is undefined\n      @transform_items[index] = @transform_items[index].concat(@selected_rows)\n      @selected_rows = []\n\n    transformRemove: (index) ->\n      @transform_items[index].forEach (position) =>\n        @transform_phrases[position].added = false\n        @transform_phrases[index].words = undefined\n      delete @transform_items[index]\n\n    transform: ->\n      @list.phrases.forEach (phrase) =>\n        $.each @transform_items, (main_index, item_indexes) =>\n          item_indexes.forEach (item_index) =>\n            phrase.phrase = replaceWord(phrase.phrase, @transform_phrases[item_index].phrase, @transform_phrases[main_index].phrase)\n      @transform_phrases = {}\n      @transform_items = {}\n      @selected_rows = []\n      closeModal('transform')\n"],"sourceRoot":"/source/"}