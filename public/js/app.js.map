{"version":3,"sources":["app.coffee","mixins/sort.coffee"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["$(document).ready ->\r\n  app = new Vue\r\n    el: '#app'\r\n    mixins: [sort]\r\n    data:\r\n      addwords_error: false\r\n      phrase_search: ''\r\n      list:\r\n        title: null\r\n        phrases: []\r\n      modal: {}\r\n      modal_phrase: {\r\n        phrase: null, frequency: null, minus: null\r\n      }\r\n    methods:\r\n      runModal: (action, title, placeholder = 'список слов или фраз', value = null) ->\r\n        @modal = value: value, action: action, title: title, placeholder: placeholder\r\n        showModal('main')\r\n\r\n      addWords: ->\r\n        new_phrases = []\r\n        @addwords_error = false\r\n        @modal.value.split('\\n').forEach (line, index) =>\r\n          return if @addwords_error # one error at a time\r\n          # skip empty lines\r\n          if line.trim().length\r\n            # parse tabs\r\n            parsed_line = line.split('\\t')\r\n            # error if more than N elements\r\n            return @addWordsError(index, line, 'некорректрое форматирование') if parsed_line.length > 3\r\n            [phrase, frequency, original] = parsed_line\r\n            ### PHRASE ###\r\n            # error if no original value\r\n            return @addWordsError(index, line, 'отсутствует основная фраза') if not phrase\r\n            [phrase, minus] = @separateMinuses(phrase)\r\n            list_item = {phrase: phrase, minus: minus, original: phrase}\r\n            ### FREQUENCY ###\r\n            if frequency\r\n              return @addWordsError(index, line, 'частота должна быть числом') if not $.isNumeric(frequency)\r\n              list_item.frequency = parseInt(frequency)\r\n            ### ORIGINAL ###\r\n            list_item.original = original if original\r\n            new_phrases.push(list_item)\r\n        return if @addwords_error\r\n        @list.phrases = @list.phrases.concat(new_phrases)\r\n        closeModal()\r\n\r\n      addWordsError: (index, line, message) ->\r\n        @addwords_error = true\r\n        notifyError(\"#{message}<br>строка #{index + 1}: <i>#{line}</i>\")\r\n        return false\r\n\r\n      # удалить дубликаты\r\n      uniq: (phrases = null) ->\r\n        new_phrases = _.uniq((phrases or @list.phrases), 'phrase')\r\n        if phrases\r\n          return new_phrases\r\n        else\r\n          @list.phrases = new_phrases\r\n\r\n      # разбить фразы на слова\r\n      splitPhrasesToWords: (phrases = null) ->\r\n        new_phrases = []\r\n        (phrases or @list.phrases).forEach (list_item) ->\r\n          list_item.phrase.split(' ').forEach (word) ->\r\n            word = word.trim()\r\n            if word.length\r\n              item = _.extend _.clone(list_item), {phrase: word}\r\n              delete item.id\r\n              new_phrases.push item\r\n        if phrases\r\n          return new_phrases\r\n        else\r\n          @list.phrases = new_phrases\r\n\r\n      separateMinuses: (phrase, minus = []) ->\r\n        minus = minus.split(' ') if not $.isArray(minus)\r\n        words = []\r\n        phrase.split(' ').forEach (value) ->\r\n          if value[0] is '-' and value.trim().length\r\n            minus.push(value)\r\n          else\r\n            words.push(value)\r\n        [words.join(' '), minus.join(' ')]\r\n\r\n      convertToMinus: (phrase) ->\r\n          minus = []\r\n          phrase.toWords().forEach (value) ->\r\n            if value[0] is '-' and value.length > 1\r\n              minus.push value\r\n            else\r\n                minus.push '-' + value\r\n          minus.join ' '\r\n\r\n      removeFrequencies: ->\r\n        @list.phrases.forEach (list_item) ->\r\n          list_item.frequency = undefined\r\n\r\n      removePhrase: (phrase) ->\r\n        @list.phrases = _.without @list.phrases, phrase\r\n\r\n      removeMinuses: ->\r\n        @list.phrases.forEach (phrase) -> phrase.minus = ''\r\n\r\n      removePluses: ->\r\n        @list.phrases.forEach (list_item) ->\r\n          #list_item.phrase = list_item.phrase.replace(exactMatch('\\\\+[\\\\wа-яА-Я]+'), ' ').trim()\r\n          words = []\r\n          list_item.phrase.split(' ').forEach (word) -> words.push(word) if word.length > 1 and word[0] != '+'\r\n          list_item.phrase = words.join ' '\r\n        @removeEmptyPhrases()\r\n\r\n      removeEmptyPhrases: ->\r\n        @list.phrases = @list.phrases.filter (list_item) -> list_item.phrase\r\n\r\n      deleteWordsInsidePhrase: ->\r\n        @modal.value.split('\\n').forEach (textarea_phrase) =>\r\n          @list.phrases.forEach (phrase) =>\r\n            if phrase.phrase.match exactMatch textarea_phrase.trim()\r\n              phrase.phrase = removeDoubleSpaces(phrase.phrase.replace(exactMatch(textarea_phrase.trim()), ' ')).trim()\r\n        @removeEmptyPhrases()\r\n        closeModal()\r\n\r\n      deletePhrasesWithWords: ->\r\n        @modal.value.split('\\n').forEach (textarea_phrase) =>\r\n            @list.phrases = _.filter @list.phrases, (phrase) =>\r\n                not phrase.phrase.match exactMatch textarea_phrase\r\n        closeModal()\r\n\r\n      getHardIndex: (phrase) ->\r\n        1 + _.findIndex @list.phrases, phrase\r\n\r\n      startEditingPhrase: (phrase) ->\r\n        @original_phrase = _.clone phrase\r\n        @modal_phrase    = _.clone phrase\r\n        showModal 'edit-phrase'\r\n\r\n      editPhrase: ->\r\n        [@modal_phrase.phrase, @modal_phrase.minus] = @separateMinuses @modal_phrase.phrase, @convertToMinus @modal_phrase.minus\r\n        phrase_index = _.findIndex @list.phrases, @original_phrase\r\n        _.extendOwn @list.phrases[phrase_index], @modal_phrase\r\n        closeModal 'edit-phrase'\r\n\r\n\r\n    computed:\r\n      filtered_phrases: ->\r\n        return [] unless @list?.phrases.length\r\n        @list.phrases.filter (list_item) =>\r\n          list_item.phrase.indexOf(@phrase_search) isnt -1","this.sort =\r\n    methods:\r\n        sort: ->\r\n            return unless @list.phrases and @list.phrases.length\r\n\r\n            @getWords()\r\n            @getWeights()\r\n            @sortPhraseByWeight()\r\n\r\n\r\n        getWords: ->\r\n            @words = []\r\n            for index, phrase of @list.phrases\r\n                @words.push.apply @words, @splitBySpace phrase.phrase\r\n\r\n        getWeights: ->\r\n            @word_weights = []\r\n\r\n            word_groups =  _.chain @words\r\n            .groupBy (word) -> word\r\n            .sortBy (word) -> word.length\r\n            .value()\r\n\r\n            _.map word_groups, (group) =>\r\n                @word_weights[group[0]] = group.length\r\n\r\n        sortPhraseByWeight: ->\r\n            @list.phrases.forEach (phrase) =>\r\n                words = @splitBySpace phrase.phrase\r\n\r\n                words_sorted_by_weight = _.sortBy words.sort().reverse(), ((word) =>\r\n                    @word_weights[word])\r\n                .reverse()\r\n\r\n                phrase_weight = []\r\n                words_sorted_by_weight.forEach (word) =>\r\n                    phrase_weight.push @word_weights[word]\r\n\r\n                phrase.phrase        = words_sorted_by_weight.join ' '\r\n                phrase.phrase_weight = phrase_weight\r\n\r\n            @list.phrases.sort (a, b) ->\r\n                length = Math.min a.phrase_weight.length, b.phrase_weight.length\r\n                min = false\r\n                for i in [0 .. length - 1]\r\n                    debugger if a.phrase_weight[i] is 41 and b.phrase_weight[i] is 124\r\n                    min = -1 if a.phrase_weight[i] < b.phrase_weight[i]\r\n                    min = 1 if a.phrase_weight[i] > b.phrase_weight[i]\r\n                    break if min\r\n\r\n                if not min\r\n                    min = b.phrase_weight.length - a.phrase_weight.length\r\n                    if min is 0\r\n                        min = -1 if a.phrase > b.phrase\r\n                        min =  1 if a.phrase < b.phrase\r\n                min\r\n            .reverse()\r\n\r\n        splitBySpace: (string) ->\r\n            _.without (string.split ' '), ''\r\n"]}